#ISTRUZIONI PER L'INSTALLAZIONE DI POSTGRESQL/POSTGIS SU SERVER UBUNTU

---ACCEDERE AL TERMINALE UTILZZANDO PUTTY---
sudo apt install openssh-server
ifconfig

---INSTALLARE APACHE2 (*opzionale)---
sudo apt install apache2

#VERIFICARE INDIRIZZO IP DEL PROPRIO PC/SERVER
hostname -I

#IMPOSTAZIONI FIREWALL
sudo ufw app list
sudo ufw allow 'Apache'
sudo ufw status

#VERIFICARE LO STATO DI APACHE
sudo systemctl status apache2

#VERIFICARE FUNZIONAMENTO APACHE
http://your_server_ip

#COMANDI DI APACHE
sudo systemctl stop apache2
sudo systemctl start apache2
sudo systemctl restart apache2
sudo systemctl reload apache2

---INSTALLARE POSTGRESQL+POSTGIS---
sudo apt && sudo apt upgrade
sudo apt install postgis
sudo -u postgres createdb test_data
sudo -u postgres psql
ALTER USER postgres PASSWORD ''; #inserire una password
sudo nano /etc/postgresql/10/main postgresql.conf
#MODIFICARE LISTEN ADDRESSESS -> ELEIMINARE IL # E INSERIRE '*'
sudo nano /etc/postgresql/10/main pg_hba.conf
#SOTTO IPV4 INSERIRE L'IP DELLE CONNESSIONI IN ENTRATA. PER PERMTTERE QUALSIASI CONNESSIONE DIGITARE ED ELIMINARE LA VECCHIA STRINGA
host all all 0.0.0.0/0 md5
sudo service postgresql restart

---INSTALLAZIONE DI DJANGO---
sudo apt update
#verificare versione python
python3 -V
pip install psycopg2
sudo apt install python3-django

#testa l'installazione
django-admin --version 

#INSTALLA DJANGO IN AMBIENTE VIRTUALE
sudo apt install python3-pip #pacchetto pip
sudo apt install python3-venv #pacchetto venv

#creare una directory per ospitare i progetti
mkdir ~/django_project
cd ~/django_project

#crea un'ambiente virtuale (my_env) all'interno della cartella
python3.6 -m venv my_env
###Suggerimento: meglio utilizzare env differenti per i diversi progetti per non creare problemi di compatibilità con le versioni. Creare quindi una cartella Environments e creare all'interno diversi ambienti di pyhton. 

source my_env/bin/activate #attiva l'ambiente virtuale (nel prompt compare (my_env); nell'ambiente virtuale non ci sono pacchetti installati e quindi bisogna installarli (numpy, ptz, psutil)
(my_env) $ pip list #lista dei pacchetti
(my_env) $ pip install django
(my_env) $ django-admin --version
(my_env) $ deactivate #per disattivare l'ambiente virtuale

sudo apt-get install libpq-dev python-dev
pip install psycopg2

#creare un progetto di esempio
(my_env) $ django-admin startproject mysite . #importante il punto finale

#creare un app di esempio all'interno di mysite
(my_env) $ django-admin startapp polls

#migrazione django funziona definendo dei modelli. Per applicare le modifiche apportate ai modelli bisogna effettura la migrazione verso il database di riferimento che è sqlite di default
(my_env) $ pyhton manage.py migrate

(my_env) $ python manage.py createsuperuser #crea un super user

(my_env) $ nano /django_project/djangoapp/settings.py
ALLOWED_HOSTS = ['your_server_ip_or_domain', 'your_second_ip_or_domain', . . .]

#testign del server
(my_env) $ sudo ufw allow 8000
(my_env) $ python manage.py runserver 192.x.x.x:8000

http://192.x.x.x:8000

#interfaccia amministratore hhtp://192.x.x.x:8000/admin/

##################### local library example ################################
python3 manage.py startapp catalog
#registrare la nuova app catalog (n.b. con d.jango è preferibile creare aplicazioni separate per ogni applicazione es. sito, area download, blog)
(my_env) sudo nano locallibrary/locallibrary/settings.py
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'catalog', 
]
#altre impostazioni
#è possibile cambiare il database, secret_key e debug
TIME_ZONE = 'Europe/London'
ALLOWED_HOSTS = ['your_server_ip_or_domain', 'your_second_ip_or_domain', . . .]
#testign del server
(my_env) $ sudo ufw allow 8000
(my_env) $ python manage.py runserver 192.x.x.x:8000

http://192.x.x.x:8000

#modificare urls.py
(my_env) $ sudo nano locallibrary/locallibrary/urls.py
from django.contrib import admin
from django.urls import path

urlpatterns = [
    path('admin/', admin.site.urls),
]

# Use include() to add paths from the catalog application 
from django.urls import include
from django.urls import path

urlpatterns += [
    path('catalog/', include('catalog.urls')),
]

#Add URL maps to redirect the base URL to our application
from django.views.generic import RedirectView
urlpatterns += [
    path('', RedirectView.as_view(url='catalog/', permanent=True)),
]

# Use static() to add url mapping to serve static files during development (only)
from django.conf import settings
from django.conf.urls.static import static

urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)
### creare urls.py nella cartella dell'app catalog
(my_env)$ sudo touch urls.py
### scrivere nella cartella
(my_env)$ sudo nano urls.py
from django.urls import path
from . import views

urlpatterns = [

]
#eseguire la migrazione del database
python3 manage.py makemigrations
python3 manage.py migrate

## creare il modello per locallibrary

<img src='https://mdn.mozillademos.org/files/16479/local_library_model_uml.png'>



######### blog example ####################
#all'interno della cartella django-project creiamo diverse app. La prima app è blog con il segeunte comando.
python manage.py startapp blog
.
├── blog
│   ├── admin.py
│   ├── apps.py
│   ├── __init__.py
│   ├── migrations
│   │   └── __init__.py
│   ├── models.py
│   ├── tests.py
│   └── views.py
├── db.sqlite3
├── django_project
│   ├── asgi.py
│   ├── __init__.py
│   ├── __pycache__
│   │   ├── __init__.cpython-36.pyc
│   │   ├── settings.cpython-36.pyc
│   │   ├── urls.cpython-36.pyc
│   │   └── wsgi.cpython-36.pyc
│   ├── settings.py
│   ├── urls.py
│   └── wsgi.py
└── manage.py



urlpatterns = [
    path('', views.home, name='blog-home'),
    path('about/', views.about, name='about-home'),
]

#connettere il database porstgresql
settings.py
DATABASES = {
	'deafult':{
		'ENGINE': 'django.db.backends.postgresql',
		'NAME': 'dbname',
		'USER': 'dbuser',
		'PASSWORD' : 'dbpassword',
		'HOST' : 'db host name',
		'PORT' : 'db port name'
	}
}

#per vedere sql creato
python manage.py sqlmigrate blog 001 #(001 numero della migrazione)


pip install django-crispy-form





