ISTRUZIONI PER L'INSTALLAZIONE SU SERVER UBUNTU

ACCEDERE AL TERMINALE UTILZZANDO PUTTY
sudo apt install openssh-server
ifconfig

INSTALLARE APACHE2 (*opzionale)

sudo apt install apache2

VERIFICARE INDIRIZZO IP DEL PROPRIO PC/SERVER

hostname -I

IMPOSTAZIONI FIREWALL

sudo ufw app list
sudo ufw allow 'Apache'
sudo ufw status

VERIFICARE LO STATO DI APACHE

sudo systemctl status apache2

VERIFICARE FUNZIONAMENTO APACHE

http://your_server_ip

COMANDI DI APACHE
sudo systemctl stop apache2
sudo systemctl start apache2
sudo systemctl restart apache2
sudo systemctl reload apache2

INSTALLARE POSTGRESQL+POSTGIS

sudo apt && sudo apt upgrade
sudo apt install postgis
sudo passwd postgres
sudo -u postgres createdb test_data
sudo -u postgres psql
ALTER USER postgres PASSWORD ''
sudo nano /etc/postgresql/10/main postgresql.conf
MODIFICARE LISTEN ADDRESSESS -> ELEIMINARE IL # E INSERIRE '*'
sudo nano /etc/postgresql/10/main pg_hba.conf
SOTTO IPV4 INSERIRE L'IP DELLE CONNESSIONI IN ENTRATA. PER PERMTTERE QUALSIASI CONNESSIONE DIGITARE
host all all 0.0.0.0/0 md5
sudo service postgresql restart

INSTALLAZIONE DI DJANGO

sudo apt update

python3 -V #verificare versione python

sudo apt install python3-django

django-admin --version #testa l'installazione

INSTALLA DJANGO IN AMBIENTE VIRTUALE

sudo apt install python3-pip #pacchetto pip
sudo apt install python3-venv #pacchetto venv

#creare una directory per ospitare i progetti

mkdir ~/django_project
cd ~/django_project

python3.6 -m venv my_env #crea un'ambiente virtuale (my_env) all'interno della cartella
source my_env/bin/activate #attiva l'ambiente virtuale (nel prompt compare (my_env)

(my_env) $ pip install django
(my_env) $ django-admin --version
(my_env) $ deactivate #per disattivare l'ambiente virtuale

#creare un progetto di esempio
(my_env) $ django-admin startproject mysite . #importante il punto finale

#creare un app di esempio all'interno di mysite
(my_env) $ django-admin startapp polls

#migrazione django funziona definendo dei modelli. Per applicare le modifiche apportate ai modelli bisogna effettura la migrazione verso il database di riferimento che è sqlite di default
(my_env) $ pyhton manage.py migrate

(my_env) $ python manage.py createsuperuser #crea un super user

(my_env) $ nano /django_project/djangoapp/settings.py
ALLOWED_HOSTS = ['your_server_ip_or_domain', 'your_second_ip_or_domain', . . .]

#testign del server
(my_env) $ sudo ufw allow 8000
(my_env) $ python manage.py runserver 192.x.x.x:8000

http://192.x.x.x:8000

#interfaccia amministratore hhtp://192.x.x.x:8000/admin/

##################### local library example ################################
python3 manage.py startapp catalog
#registrare la nuova app catalog (n.b. con d.jango è preferibile creare aplicazioni separate per ogni applicazione es. sito, area download, blog)
(my_env) sudo nano locallibrary/locallibrary/settings.py
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'catalog', 
]
#altre imostazioni
#è possibile cambiare il database, secret_key e debug
TIME_ZONE = 'Europe/London'
ALLOWED_HOSTS = ['your_server_ip_or_domain', 'your_second_ip_or_domain', . . .]
#testign del server
(my_env) $ sudo ufw allow 8000
(my_env) $ python manage.py runserver 192.x.x.x:8000

http://192.x.x.x:8000

#modificare urls.py
(my_env) $ sudo nano locallibrary/locallibrary/urls.py
from django.contrib import admin
from django.urls import path

urlpatterns = [
    path('admin/', admin.site.urls),
]

# Use include() to add paths from the catalog application 
from django.urls import include
from django.urls import path

urlpatterns += [
    path('catalog/', include('catalog.urls')),
]

#Add URL maps to redirect the base URL to our application
from django.views.generic import RedirectView
urlpatterns += [
    path('', RedirectView.as_view(url='catalog/', permanent=True)),
]

# Use static() to add url mapping to serve static files during development (only)
from django.conf import settings
from django.conf.urls.static import static

urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)
### creare urls.py nella cartella dell'app catalog
(my_env)$ sudo touch urls.py
### scrivere nella cartella
(my_env)$ sudo nano urls.py
from django.urls import path
from . import views

urlpatterns = [

]
#eseguire la migrazione del database
python3 manage.py makemigrations
python3 manage.py migrate

## creare il modello per locallibrary

<img src='https://mdn.mozillademos.org/files/16479/local_library_model_uml.png'>
